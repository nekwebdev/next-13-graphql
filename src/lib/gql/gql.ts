/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  query GetGlobalQuery {\n    global {\n      data {\n        attributes {\n          siteName\n          favicon {\n            ... on UploadFileEntityResponse {\n              data {\n                ... on UploadFileEntity {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n          seo {\n            ... on ComponentSharedSeo {\n              metaTitle\n              metaDescription\n              shareImage {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      attributes {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetGlobalQueryDocument,
    "\n  query GetNavigationQuery {\n    navigation {\n      data {\n        attributes {\n          logo {\n            ... on UploadFileEntityResponse {\n              data {\n                ... on UploadFileEntity {\n                  id\n                  attributes {\n                    name\n                    alternativeText\n                    caption\n                    width\n                    height\n                    url\n                  }\n                }\n              }\n            }\n          }\n          links {\n            ... on ComponentMenuDropdown {\n              id\n              label\n              image {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      id\n                      attributes {\n                        name\n                        alternativeText\n                        caption\n                        width\n                        height\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n              sections {\n                ... on SectionRelationResponseCollection {\n                  data {\n                    attributes {\n                      label\n                    }\n                  }\n                }\n              }\n            }\n            ... on ComponentMenuLink {\n              id\n              label\n              style\n              url\n              image {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      id\n                      attributes {\n                        name\n                        alternativeText\n                        caption\n                        width\n                        height\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n              page {\n                ... on PageEntityResponse {\n                  data {\n                    attributes {\n                      slug\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetNavigationQueryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetGlobalQuery {\n    global {\n      data {\n        attributes {\n          siteName\n          favicon {\n            ... on UploadFileEntityResponse {\n              data {\n                ... on UploadFileEntity {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n          seo {\n            ... on ComponentSharedSeo {\n              metaTitle\n              metaDescription\n              shareImage {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      attributes {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGlobalQuery {\n    global {\n      data {\n        attributes {\n          siteName\n          favicon {\n            ... on UploadFileEntityResponse {\n              data {\n                ... on UploadFileEntity {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n          seo {\n            ... on ComponentSharedSeo {\n              metaTitle\n              metaDescription\n              shareImage {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      attributes {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetNavigationQuery {\n    navigation {\n      data {\n        attributes {\n          logo {\n            ... on UploadFileEntityResponse {\n              data {\n                ... on UploadFileEntity {\n                  id\n                  attributes {\n                    name\n                    alternativeText\n                    caption\n                    width\n                    height\n                    url\n                  }\n                }\n              }\n            }\n          }\n          links {\n            ... on ComponentMenuDropdown {\n              id\n              label\n              image {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      id\n                      attributes {\n                        name\n                        alternativeText\n                        caption\n                        width\n                        height\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n              sections {\n                ... on SectionRelationResponseCollection {\n                  data {\n                    attributes {\n                      label\n                    }\n                  }\n                }\n              }\n            }\n            ... on ComponentMenuLink {\n              id\n              label\n              style\n              url\n              image {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      id\n                      attributes {\n                        name\n                        alternativeText\n                        caption\n                        width\n                        height\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n              page {\n                ... on PageEntityResponse {\n                  data {\n                    attributes {\n                      slug\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetNavigationQuery {\n    navigation {\n      data {\n        attributes {\n          logo {\n            ... on UploadFileEntityResponse {\n              data {\n                ... on UploadFileEntity {\n                  id\n                  attributes {\n                    name\n                    alternativeText\n                    caption\n                    width\n                    height\n                    url\n                  }\n                }\n              }\n            }\n          }\n          links {\n            ... on ComponentMenuDropdown {\n              id\n              label\n              image {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      id\n                      attributes {\n                        name\n                        alternativeText\n                        caption\n                        width\n                        height\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n              sections {\n                ... on SectionRelationResponseCollection {\n                  data {\n                    attributes {\n                      label\n                    }\n                  }\n                }\n              }\n            }\n            ... on ComponentMenuLink {\n              id\n              label\n              style\n              url\n              image {\n                ... on UploadFileEntityResponse {\n                  data {\n                    ... on UploadFileEntity {\n                      id\n                      attributes {\n                        name\n                        alternativeText\n                        caption\n                        width\n                        height\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n              page {\n                ... on PageEntityResponse {\n                  data {\n                    attributes {\n                      slug\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function graphql(source: string): unknown;

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;